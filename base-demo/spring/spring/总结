
Spring
简述: 分层的,一站式轻量级框架

1.  javaEE分层:
    表现层: springMVC
    业务层: IOC(控制反转),AOP切面,事物控制
    持久层: JdbcTempleate,Mybatis,SpringDataApi

2. IOC(控制反转)
    简述: 将对象创建的权利交给spring工厂来创建,管理

    演变过程:
    <1> 传统方式:
        在service层创建Dao层对象,然后调用Dao层的方式来获取数据
        缺点: service层与Dao层高度耦合
        解决方案: 通过工厂来获取Dao对象,实现service与Dao解耦

    <2> spring改动一
        创建一个工厂对象,在工厂对象方法中创建Dao层对象,并返回
        缺点: service与Dao解耦了,但工厂与Dao层高度耦合
        解决方案: 获取反射方式获取对象,并返回

     <3> srping改动二
         在方法中通过反射方式获取对象,并返回
         缺点: Dao层路径发生改变,那么工厂中的反射路径也要跟着改动
         解决方案: 通过配置的方式来管理对象,这样的话代码层不需要做任何变动,只需要该配置即可

     <4> 创建applicationContext.xml配置文件,来管理对象
         步骤:
         第一步: 配置文件中配置类名,类路径
         第二步: 在service层读取配置文件获取Dao层对象
         // 创建srping工厂
         ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
         // 从spring工厂中获取对象,通过bean的id/name
         IUserDao userDao = (IUserDao) ac.getBean("userDao");
3. DI依赖注入的实现
   简述: 将一个对象bean对象动态的注入到另一个bean对象中
   步骤:
   第一步: 在service实现类中引入Dao层对象,并在service中创建该对象的set方法
   第二步: 通过引入的dao对象调用获取数据的方法
   第三步: 在配置文件中配置service的bean,在service的bean中注入Dao层bean
   第四步: 创建service对象,调用service方法完成获取Dao层数据

4. 实例化bean的四种方式
    <1> 无参构造器
    第一步: 创建一个bean
    第二步: 在配置文件中配置bean

    <2> 静态工厂方法
    第一步: 创建bean2对象
    第二步: 创建bean2工厂对象
    第三步: 在bean2工厂对象中添加bean2对象作为属性,创建有参构造
    第四步: 配置文件中配置: id: bean2 name: bean2工厂的类全路径 factory-method= getBean2(指定调用这个方法来获取对象)
    原理: 通过类名.静态方法来获取对象

    <3> 实例工厂方法
    第一步: 在第二个方式的基础上,有参构造去掉"static"关键词
    第二步: 配置文件中配置两个bean:
          1)配置bean一: id: bean3Factory   name: bean3Factory类全路径
          2)配置bean二: id: bean3   name: bean3Factory factory-method: getBean3
    原理: 先获取工厂对象,然后通过工厂调用工厂中的获取对象方法,来获取对象

     <4> FactoryBean方式
     第一步: 创建bean4对象
     第二步: 创建bean4工厂并实现FactoryBean,并复写里面的所有方法
     第三步: 在获取对象方法中,将返回值修改为:返回创建的对象
     第四步: 在配置文件中配置: id: bean4 name: bean4工厂类全路径

5. Bean的作用域
   简述: 由spring创建的bean在什么情况下有效
   有以下场景:
    单例(singleton): 每次创建对象都是同一个对象
    spring管理对象默认为单例
    好处: 在整个程序运行期间,用到的对象都是同一个,节约了资源,提高了性能,因为它不再需要每一次创建新的对象了
    多例(prototype): 每次创建的对象都不一样
    request: 每次发送请求则创建一次bean
    session: 同一个session共享同一个bean
    globalSession: web端使用
    单例和多例的区别: 单例是在工厂创建的时候就已经实例化了,而多例是在创建对象的时候实例化的
6. Bean的生命周期
    通过配置文件来配置Bean的初始化和销毁动作
    <1> init-method  用来指定bean初始化化的方法
    <2> destroy-method 用来指定bean销毁的方法
    注:销毁的方法不会自动执行,原因是: 当创建对象成功后jvm则停止了运行,也就不会去调用销毁的方法,销毁的方法需要我们手动执行
        ac.close();  则对容器进行销毁并调用销毁方法

7. Bean属性的依赖注入
    简述: 就是给成员变量进行赋值
    属性注入的两种方式:  1. 通过构造器进行赋值  2. 通过set方式进行赋值

8. 开启注解扫描
   <!--开启注解扫描(包含了开启使用注解的功能,如果不开启注解则使用不了,同时还可以省略开启注解功能的配置)-->
   <context:component-scan base-package="com.spring"/>

9. 属性注入使用注解的方式
    <1> @value  <2> @Autowired  <3> @Resource  <4> @Inject

10. bean的生命周期和作用域使用注解

11. spring监听器
    由来: spring获取对象的方式都是从工厂中获取,而每一次获取去对象都要创建一次工厂对象,及浪费资源又降低性能
    解决方案: 通过spring监听器将spring容器以属性的方式存放在servletContent容器中
             spring中有个contextLoadListener监听器,当项目启动后创建servlet对象后,
             监听器会创建一个spring容器,将这个容器存放在servletContent容器中
    步骤:
    <1> 引入jar包
     <artifactId>spring-web</artifactId>
    <2> 配置spring监听器(在web.xml中)
     1) 配置监听器   <listener-class></listener-class>
     2) 配置读取配置的路径  <param-value>classpath:applicationContext.xml</param-value>
    <3> 获取spring容器两种方式
        第一种通过属性的方式获取,第二种通过工具类获取


AOP
简述: 面向切面编程,对原来的功能进行增强,但又不修改原来的代码,通过动动态代理思想,创建一个代理对象来对原有功能进行增强
OOP: 面向对象编程
1. 应用场景
   <1> 记录日志  <2> 监控方法运行时间  <3> 权限控制
   <4> 缓存优化: 第一次从数据库中获取,将查询结果放入内存对象中,第二次调用 直接从内存中获取,不需要从数据库中再次查询
   <5> 事务管理

2. Aop编程的两种方式
    <1> 纯java实现,通过代理方式对功能增强
    <2> 使用Aop框架

3. AOP术语介绍
  <1> 被增强的的对象叫做: 目标对象
  <2> 增强后对象叫做: 代理对象
  <3> 由目标对象转换为代理对象的过程叫: 织入
  <3> 代理对象中的方法叫做: 连接点(其实还是目标对象中的方法,只是叫法不同)
  <4> 代理对象中需要增强的方法叫: 切入点
  <5> 增强的代码叫做通知或增强
  <6> 将增强的代码融入到切入点中叫: 切面

4. JDK动态代理缺点: 必须要有接口,才能使用,Cglib动态代理则不需要接口,通过类就可以完成动态代理

5. Cglib动态代理实现步骤:
   1. 创建Cglib代理工厂,并设为有参构造,这个参数则是目标对象(被代理对象)
   2. 在代理工厂中创建一个代理方法,并返回代理对象
   2.1 创建代理生成器 Enhancer en=new Enhancer()
   2.2 设置目标对象   en.setSupperClass(目标对象)
   2.3 设置回调函数   en.setCalback(this)
   2.4 创建代理对象并返回   en.create;
   3. 代理工厂实现methodInterptor,复写里面的方法
   4. 在代理工厂中创建增强方法,在复写的方法里面调用增强方法即可

    总结: springAop优先对接口进行代理(也就是使用JDK动态代理),在目标对象没有接口的情况下才会使用Cglib动态代理
         srpringAop是基于JDK动态代理和Cglib动态代理的,默认使用的是JDK动态代理

2. spring的各种通知
    步骤:
    <1> 引入srpingAop通知依赖
    <2> 在applicationContent.xml中开启注解扫描,和springAop代理机制
    <3> 创建增强类,用@Aspect
    <4> 在类中自定义前置,后置,环绕,抛出,最终通知方法

    <1> 前置通知
     简述: 在业务逻辑执行之前,执行增强代码逻辑
     应用: 用户是否登录  权限控制(是否有访问权限)  记录方法调用日志信息

    <2> 后置通知
    简述: 在业务逻辑处理完之后,执行增强代码逻辑
    应用: 与业务相关的处理,比如: 网上查询话费余额,查询完余额之后以短信的方式通知我们,这个短信通知就是在我们查询完
          余额业务逻辑之后,再做一个短信发送的一个功能

    <3> 环绕通知
    简述: 在业务逻辑处理前后,执行增强代码逻辑
    应用场景: 日志,缓存,权限,性能监控,事物管理

    <4> 抛出通知
    简述: 当业务代码出现异常,则通过增强代码处理(记录异常日志,以短信或者邮件方式通知管理员等操作,或者具体抛出一个自定义异常)
    应用场景: 处理异常,记录日志

    <5> 最终通知
    简述: 不管业务代码有没有异常,最终都会执行增强代码
    应用场景: 释放资源(关闭文件,关闭数据库连接,网络连接,释放内存对象)

    代理方式扩展:
        当使用JKD动态代理的时候,它是面向接口进行代理的,接口中有几个方法,那么代理对象中就只能对这些方法增强,可如果
        接口的实现类中添加了一个新的方法想要增强,此时JDK动态代理则实现不了的
        那么则需要将spring的代理方式设置为Cglib代理,通过类来实功能增强

spring JdbcTemplate
    简述: 通过JdbcTemplate模板工具类对数据库进行CRUD操作
    其实目前我们用mybatis框架

spring的事物管理
1. 事务的传播行为
    简述: 两个行为要么分成两个单独的事务,两个事务之间相互独立,互不干扰,
          要么就是两个行为在同一个事务中,要么全部成功,要么全部失败

2.  事务的传播行为分为7类,分为三大类

    <1> PROPAGATION_REQUIRED(默认值)、PROPAGATION_SUPPORTS、PROPAGATION_MANDATORY
        两个或多个行为在同一个事务中,要么一起成功,要么一起失败
    <2> PROPAGATION_REQUIRES_NEW、PROPAGATION_NOT_SUPPORTED、PROPAGATION_NEVER
        两个或多个行为分别为不同的事务中,各个事务相互独立互不干扰
    <3> 嵌套式事务
        比如一个事务中有3个行为A,B,C,当B的行为务出现问题时,A和C行为不会受到影响,还可以正常运行

3.  事务管理的两种方式
    <1> 编程式管理
        修改原来的业务代码,加入事务管理的代码,侵入性强
    <2> 声明式管理
        通过注解的方式进行管理
