1. 无状态登录原理
    <1> 什么是有状态
        简述: 客户端与服务端每次回话,服务端都要记住客户端信息,从而识别身份,根据用户身份进行请求处理,典型的设计就是
              tomact中的session
              session保存用户信息,并返回一个sessionID放入cookie中,下一次用户访问携带cookie,服务端从cookie中取出sessionID
              来确认用户信息
         缺点:
            a) 服务端保存大量数据,增加服务端压力
            b) 服务端保存用户状态,无法进行水平扩展(session只能保存在一个服务端中,是无法做服务端集群的)
            c) 客户端请求依赖服务端,多次请求必须访问同一个服务端

    <2> 什么是无状态
        a. 服务端不保存客户端请求者信息
        b. 客户端的每次请求必须具有自描述信息,通过这些信息识别客户端身份
        优点:
            a) 客户端请求不依赖服务端,多次请求不需要访问同一个服务端
            b) 减少了服务端存储的压力
            c) 可以做服务端的集群
            d) 服务端可以任意的迁移或伸缩

    <3> 如何实现无状态
        a) 当客户端第一次访问服务端时,服务端对用户信息进行认证(登录)
        b) 认证通过,服务端对用户信息进行加密生成一个token,并返回给客户端,作为登录凭证
        c) 以后每次请求,客户端都携带认证的token
        d) 服务端对token解密,判断是否有效

    <4> token的安全性
        token是作为客户端身份认证的唯一标识,怎样才能保证它的安全性呢?
        这里采用的是JWT+RSA非对称加密

    <5> JWT
        对我们的token进行加密,JWT分为三部分:
        1. header头: 里面包括类型和算法
        2. payload: 载荷,里面包含用户信息,有效时间和签发者
        3. Signature: 签名,整个数据的认证信息,就是签发者进行加密

    <6> 加密算法
        a)  对称加密(AES)
            原理: 将明文分成N组,对每个组进行加密,最后把所有的密文进行合并,形成最后的密文
            优点: 算法公开,计算量小,加密速度快,加密效率高
            缺点: 客户端和服务端使用共同的秘钥(如果出现问题无法判断是客户端的问题还是服务端的问题)

        b)  非对称加密(RSA)
            原理: 同时生成两把秘钥,公钥和私钥,私钥可以秘密保存,公钥可以发给信任的客户端
            私钥加密: 公钥和私钥都可以进行解密
            公钥加密: 私钥才可以进行解密
            一般使用私钥进行加密,客户端通过公钥解密,服务端通过私钥解密
            优点: 安全性高,难以破解
            缺点: 算法比较耗时

        c)  不可逆加密(MD5,SHA)
            原理: 加密过程中不需要密钥,输入明文后有系统直接加密成密文,这种加密后是无法进行解密的,也无法通过密文推算出明文的

     <7> 结合zuul网关和RSA进行鉴权
        a)  客户端发起请求
