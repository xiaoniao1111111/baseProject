springBoot
简述: 搭建程序的脚手架,尽可能的减少xml的配置,做到开箱即用,迅速上手,让我们只关注业务而非配置
特点: 在使用框架或者技术的时候引入相关的启动器则会把通过的配置及依赖通过启动器引入进来,避免开发人员长时间的引入依赖和xml的配置

1. springboot父工程
    简述: 对通用依赖的版本进行管理,当我们引入依赖的时候不用考虑依赖的版本,只需要引入依赖坐标即可

2. 连接数据库数据源配置
    步骤:
    <1> 引入druid依赖
    <2> 在resource下面加application.properties配置文件,里面配置jdbc数据源
    <3> 定义一个jdbc配置类,通过@Configuration来声明这是一个配置类
    <4> 定义一个获取数据库配置方法,方法上加@Bean,@ConfigurationProperties
    <5> 在方法体中创建一个druid数据源并返回
    <6> 测试,引入Datasource,打印Datasource,就会读取到jdbc配置信息

3. springBoot注解
    @SpringBootApplication: 表示当前类是个springboot应用类
    @SpringBootApplication中有三个注解:
    <1> @SpringBootConfiguration:
        描述: springboot应用配置类,该配置类在一个项目中只能有一个,也就是说@SpringBootApplication只能有一个
        在@SpringBootConfiguration中有一个@Configuration注解,也就是说当一个类被@Configuration注解
        修饰,那么说明这个类就是一个配置类,当springboot启动之后会自动扫描到该类,从中读取配置信息
    <2> @EnableAutoConfiguration
        简述: 基于你所添加的依赖,帮你完成相关的默认配置
        去"猜测"你想如何配置spring,比如我们引入了一个spring-web启动器,里面添加了tomact,
        springMVC依赖,此时自动配置就知道你要开发一个web项目,所有就帮你完成了springmvc的默认配置
    <3> @ComponentScan
        简述: 包扫描,如果没有配,则扫描这个注解类所在的包以及子包

4. springBoot实战
    4.1 修改端口号
    4.2 静态资源
    4.3 拦截器
    拦截器和过滤器的区别:
    过滤器: 在客户端发起请求访问业务资源的时候,在请求路径上做的拦截
    拦截器: 在客户端发送请求后,在处理业务资源前做的拦截
    执行顺序: 先过滤后拦截
    步骤:
    1. 自定义一个拦截器实现handlerInterceptor,复写里面的前置,后置,最终方法
    2. 定义一个系统拦截器配置实现webMvcCongfig
    3. 里面有个addInterceptor方法,在这个方法中将我们自定义的拦截器加入到系统拦截器列表中,并设置拦截路径


