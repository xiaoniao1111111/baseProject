1. 集中式架构
   简述: 一个项目中,将所有功能模块放在一起
   存在的问题:
   <1> 代码耦合,开发维护困难
   <2> 无法针对模块进行针对性优化
   <3> 单点容错率低,并发能力差
   <4> 不利于水平扩展

2. 垂直拆分
   简述: 根据不同的业务功能对系统进行拆分
   优点:
   <1> 系统实现了流量分担,解决了并发问题
   <2> 可以针对不同模块进行优化
   <3> 方便水平扩展,负载均衡,容错率高
   存在问题: 系统间相互独立,会有很多重复工作,影响效率

3. 分布式服务
   简述: 将核心的功能抽取出来,作为单独的服务,逐渐形成稳定的服务中心
   优点: 将基础服务进行抽取,系统间相互调用,提供了代码的服务率及开发效率
   缺点: 系统间耦合度变高,调用关系错综复杂,难以维护

4. 服务治理(SOA)
   简述: 通过治理中心完成服务的注册和剔除,通过调度中心完成请求最终由那个服务器执行
   缺点: 服务之间有依赖关系,一旦某个环节出现问题影响很大(就是服务之间可以相互调用它的controller,service,dao)

5. 微服务
    简述: 根据不同的业务对系统进行拆分
   微服务的特点:
   <1> 做到单一职责,单一功能: 微服务中每一个服务都对应唯一的业务能力,做到单一职责
   <2> 微服务: 将每一个服务都拆分到很小,但里面都有自己的controller,service,dao以及数据库等
   <3> 自治: 服务间相互远程调用方式独立,互不影响,如果有相互调用,则提供一个Rest风格的接口即可


   远程调用方式有两种:  一种是RPC,另一种是http
   区别:
   RPC: 速度比较快,但需要约束双方的语言一致
   HTTP: 相对速度比较慢,但支持多种语言调用,比较灵活

7. Rest风格
   Rest是一种设计风格,它不是标准也不是软件,就是一种设计思想
   Rest架构的主要原则:
   <1> 网络上所有的事物都可以看成资源(文件,图片,视频等等)
   <2> 每个资源的访问都有一个请求路径
   <3> 同一资源它有多种表现形式(可以是图片,文档,json,xml等)
   <4> 对资源的操作都不会改变资源的请求路径
   <5> 所有的操作都是无状态的(当前的操作不需要历史信息的支持)

8. Http客户端工具
   简述:  Http是一个调用方式,其下面有很多的调用工具
   <1> http请求协议有两种:
       http1.0: 建立的是短连接,请求一次和响应之后就断开连接
       http1.1:  建立的是长连接,在一次连接中可以发起多次请求和响应

   <2> http客户端工具有以下几种:
       HtttpClient   OkHttp  URLConnection
       目前我们用的是HttpClient

9. spring的RestTemplate
   简述: 对于http客户端进行了封装,通过模板的方式发起请求,实现对象与json之间的序列化与反序列化
   步骤:
  <1> RestTemplate restTemplate = new RestTemplate();
  <2> restTemplate.getForObject("url","要转换的数据类型")
      参数1: 我们获取数据的请求路径(全路径)
      参数2: 我们拿到josn数据后要转换成的数据类型

springCloud
    简述: 微服务是一种架构方式,实现微服务的方式有很多,springCloud是其中一种,
          springcloud最擅长的是集成,将优秀的框架整合在一起,比如:
          Eureka: 注册中心  Zull: 网关  Ribbon: 负载均衡   Feign: 服务调用
          Hystix: 熔断器

总结:
    Ribbon(负载均衡),Hystrix(熔断)都是针对调用方做处理