一.  面向对象思想
    java的设计思想:  面向对象
    面向过程:   强调的是步骤
    面向对象:   强调的是对象
    区别在:面向对象强调的是通过调用对象的行为去实现某个功能,而不是过程
    例子:
    洗衣服
    面向过程:   那盆->倒水->倒洗衣服->放入衣服->浸泡10分钟->搓,揉->拧->晾干
    面向对象:   放入洗衣机->按钮->晾干

二.  对象和类
    1.  对象
    简述:是一类事物的具体体现
    例如: 手机: 型号: Iphone  颜色: 红颜色  价格: 18888   功能:可以打电话  发短息 聊QQ
    2.  类
    简述: 是一类事物属性和行为的集合
    例如: 类(手机)  属性: 型号,颜色,价格   行为: 功能

    类与对象的区别
    类是一类事物的描述,抽象的
    对象是一类事物的实例,具体的
    类是对象的模板,对象是类的具体体现

    3. 成员变量和局部变量区别
    成员变量:   类的属性
    局部变量:   类方法里面的变量
    <1> 在类中的位置不同
    局部变量:   作用在形式参数,方法中
    成员变量:   类中方法外
    <2>作用的范围不一样
    局部变量:   作用在方法中
    成员变量:   作用在类中
    <3>初始值的不同
    局部变量:   定义,赋值,使用
    成员变量:   有默认值的
    <4>内存中的位置
    局部变量:   栈内存
    成员量:    堆内存
    <5>生命周期不同
    局部变量:   随着方法的调用而存在,调用关闭而消失
    成员变量:   随着对象的创建而存在,随着对象的消失而消失

三.  封装
简述: 为了防止对类中的代码随意访问和修改,则通过封装的方式将他们保护起来,从而加强代码的安全性
原则: 将属性隐藏起来,若需要访问某个属性,则提供公共的方法对其访问
关键词: private
想要访问类中的属性,提供相应的get,set方法
    <1> 封装的优化1--this
    简述: 为了表示当前的变量为成员变量
    场景: 在一个类中,成员变量和形参变量一致时,在给成员变量赋值时发现赋值失败,此时则说明成员变量与形参变量重名,导致成员变量隐藏,没有被找到
    <2> 封装优化2--构造方法
    简述: 构建对象的时候,给成员变量赋值的方法
    构造方法分为两种: 无参构造和有参构造
    注: 在代码中创建类的时候没有写构造方法代码,为什么还能正常运行呢,这是因为在创建类的时候如果没有写构造方法,则默认为无参构造

