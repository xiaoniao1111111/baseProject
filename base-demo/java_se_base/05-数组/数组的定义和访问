容器:  是将多个数据存储在一起,容器里面的每个数据称之为元素
一.  数组的定义
概述: 将多个相同数据类型的数据保存在长度固定的容器中
特点:
    1.  数据的长度固定         2.  数据的数据类型要一致
数组格式:
    1.  方式一:
        数组类型   变量名 = new 存储数据的类型[长度]
        例子:   int[]   arr= new int[3];
    2.  方式二:
        数组类型   变量名= new 存储数据的类型[]{元素1,元素2,元素3...}
        例子：   int[] arr= new int[]{1,2,3,4};
    3.  方式三：
        数组类型    变量名 = {元素1,元素2,元素3,元素4....}
        例子:     int[] arr={1,2,3,4};

二.  数组的访问

    1.  获取数组中的元素
    概述: 访问数组中元素的方式是通过数组的索引获取(又称角标,下标);
    格式: 数组名[索引]
    例子:  arr[2]

    2.  获取数组长度
    格式: 数组名.length
    例子: arr.length

    3.  基本数据类型的默认初始值
    字符串(string)         ""
    整数(int)             0
    小数(double)          0.0
    布尔(boolean)         false
    引用数据类型          null

三.  数组原理内存图
    1.  jvm的内存划分
    寄存器:    CPU使用
    本地方法栈:     jvm在使用操作系统功能的时候使用
    堆区:     存储创建(new)出来的对象,数组的地方
    方法区:   存储jvm编译后的class文件的地方
    方法栈:   运行class文件的地方,也就是运行java程序的地方

    2.  两个变量指向一个数组
    概述: 两个变量其实指向的都是同一个数组的地址
    例子: int[]  arr={1,2,3};    int[] ac=arr;
    结果: ac数组可以获取并修改数组元素,同时arr再次获取元素发现是修改后的元素

四.  数组的常见操作

    1.  数组角标越界异常
    例子: int[] arr={1,2,3};       arr[3]获取元素值的时候出现角标越界异常
    原因: 该数组位置本来只到2,而获取不存在的3位置就会报错

    2.  数组空指针异常
    例子: int[] arr={1,2,3};      arr=null;    arr[0]获取数组中的元素会报空指针异常
    原因: 给该数组赋值为null的时候,该变量就不再会保存原来的数组地址,当再次获取原来数组中的元素时就会报空指针异常

    3.  数组反转

    4.  获取数组中最大或最小元素

五.  数组作为参数或返回值
    简述: 数组作为参数或者返回值其实指向的都是地址
