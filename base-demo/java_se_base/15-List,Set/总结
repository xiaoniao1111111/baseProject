Collection接口下面有两个子接口: list和set
List接口特点
1. 存取有序  2.可以存取重复元素  3.带有索引的集合,通过索引来操作集合中的元素
List下面有两个子类: ArrayList 和 LinkedList
ArrayList和LinkedList区别:
ArrayList查询快,增删慢,底层采用数组结构
查询快是因为有索引,根据索引可以快速找到这个元素,增删慢是因为插入一个元素后需要对所有的索引重新排序
LinkedList增删快,查询慢,底层采用链表结构
增删快是因为每一个元素都有一个节点,在这个节点前后增加或删除一个节点节点即可,而查询慢原因是因为它是链表
的结果,需要从头遍历到尾的方式进行查询,所以慢,可以存储null元素

2. 队列数据结构和堆栈数据结构
    队列数据结构特点: 先进先出(场景: 排队买票)
    堆栈数据结构: 先进后出(场景: 弹夹)

3. 二叉树(数据结构)
二叉树又名平衡二叉树,又名红黑树,TreeSet底层用的就是红黑树
简述: 二叉树最多只有两个节点,分别为: 根节点,左节点,右节点
存储值逻辑: 首先在根节点储存一个元素,然后下个元素与根节点的元素进行比较,大的放在右节点,小的放在左节点
获取二叉树的数据:
 前序遍历: 根-左-右
 中序遍历: 左-中-右
 后序遍历: 左-右-根
 按层遍历: 从上到下,从左到右(TreeSet采用的这个数据结构),其根据大小则是升序排序

4. Set接口
简述: set不能保存重复的元素,没有下标,可以存储null,但只能有一个,无序
Set有两个子类: HashSet和LinkedHashSet

4.1 HashSet特点
<1> 允许存null <2>底层采用的是哈希表数据结构 <3> 无序  <4> 元素不能重复
HashSet存储自定义对象
注意: 存储自定义对象的时候一定要复写haseCode和equals方法,因为通过这两个方法来保证元素唯一
4.2 哈希表数据结构
哈希表底层基于: 数组+链表实现+二叉树
哈希表保证元素唯一依赖于两个方法:hashCode和equals方法
原理: 首先根据HashCode算法得出索引,然后判断该索引下面是否有元素,没有元素则不用调用equals方法,直接存储.
如果有再调用equals方法判断是否相同,相同直接舍弃,不相同则存储,存储的时候开辟一个空间,则通过链表的方式进行存储,当
节点数超过8时,则会转换为二叉树,目的则是为了提高查询效率

4.3 LinkedHashSet
简述: 采用链表+哈希表结构
特点:
1. 存储有序(底层用链表结构),链表用来记录存储数据的顺序
2. 元素不重复(底层用哈希表结构),哈希表是真正存储数据的地方

5.  可变参数
    定义:  当一个方法列表中有多个参数的时候,可以用可变参数的格式将他们放在同一个数组中,
    前提是数据类型要一致
    格式: 数据类型... 变量名
    注意事项:
    1. 可变参数前面可以加参数,但后面不可以跟任何内容,否则报编译错误
    2. 方法重载的时候,有了可变参数,则另一个方法参数列表中就不能是数组了,因为可变参数本身是个数组




