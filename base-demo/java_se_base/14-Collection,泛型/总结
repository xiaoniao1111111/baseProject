1.  基本数据类与包装类
    简述: 装箱: 将基本数据类型变为包装类
          拆箱: 将包装类变为基本数据类型
    为什么要将基本数据类型变为包装类?
    原因: 基本数据类型只能做一些运算,无法使用更多的操作(方法),如果想要使用更多的操作就必须将基本数据类型
          转换为包装类,通过类来扩展更多的方法使用
    例子: int类型的装箱与拆箱(其他数据类型同理)

    自动装箱与拆箱
    简述: 不需要我们调用方法,底层自己完成装箱与拆箱

2.  基本数据类型与字符串互转
    基本数据类型转字符串: 用String.valueOf()
    字符串转基本数据类型: 用pasre+具体的数据类型()

3.  集合和数组的区别
    数组长度固定不变,集合长度是可变的
    数组存放数据类型要一致,而集合存放的是对象,对象的数据类型可以不一致

    集合家族划分:
    顶级接口: Collection
    1.1 List接口
    1) ArrayList类   数据结构: 数组数据结构
    2) LinkedList类  数据结构: 链表数据结构

    1.2 Set接口
    1) HashSet类     数据结构: 哈希表数据结构
    2) LinkedHashSet类   数据结构: 链表+哈希表数据结构

    总结: 每个list不同的原因就是存储方式不同,而决定存储方式的是底层的数据结构

    List与Set区别:
    List: 存储有序,元素可以重复,有索引
    Set: 存储无序,元素不能重复,无索引

    ArrayList类与LinkedList类区别:
    ArrayList: 查询快,增删慢,因为每次增加或删除都要重新维护索引,查询快是通过索引快速找到该索引下的值
    LinkedList: 查询慢,增删快,
    查询慢: 每次查询都要从头开始找,因为它的存储方式是首尾相连的,没有索引,只有找到第一个才能找到第二个等等异常类推
    增删快: 只要在相对应的地址前面和后面添加一个地址即可,不需要维护索引

4. 迭代器
   简述： 不同的集合存储的方式不一样，那么取数的方式也各不一样，但他们有共同的操作，就是增删改查（CRUD），对于共同的操作我们
   向上收取那就是迭代器
   迭代器原理： 一个一个的取，取之前判断有没有，有就取没有就结束
   通过hashNext()判断下面集合中所有元素是否为空，不为空则调用next()方法获取该值并进入下一个元素，若为空则结束

   while迭代与for循环迭代区别:
   whil迭代: 先创建迭代对象,然后再通过while进行迭代取元素,最终创建的迭代对象是不会销毁的,会占用资源
   for循环迭代: 创建对象实在for参数中,当取完数之后,迭代对象也会随之清除的,不占用资源

5. 泛型
    格式: <具体的数据类型>
    好处:
    1.对一个集合或者数组指定了具体的数据类型,避免了类型强制带来的麻烦
    2.将一个运行时类型转换异常转换为编译时的编译失败

5.1 泛型注意事项:
1. 不支持基本数据类型
2. 不支持多态的形式存在,定义数据类型前后要保持一致,前后数据类型不支持继承

5.2 通配符
    定义: 在方法参数的地方时,不知道接受的数据类型是什么的时候,我们可以通过通配符来接受

    通配符的高级使用-泛型受限
    泛型上限: <? extends Person>
    定义: ? 本身可以是Person也可以是Person的子类
    泛型下限: <? supper Person>
    定义: ? 本身可以是Person也可以是Person的父类



