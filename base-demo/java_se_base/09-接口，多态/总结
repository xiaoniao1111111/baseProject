1. 接口多实现
一个类只有一个父类,可以有多个接口,这个就是接口的多实现
格式:
class 类名 [extends 父类名] implements 接口名1,接口名2,接口名3... {
    // 重写接口中抽象方法【必须】
  	// 重写接口中默认方法【不重名时可选】
}
------------------------------------------------------>
2. 优先级问题
当一个类的父类和接口的成员方法重复是,会根据就近原则执行父类的成员方法
-------------------------------------------------------------->
3. 接口多继承
接口多继承同继承一样,用的是extends关键字,当子接口的方法和父接口的方法重名时,需要在复写一遍父接口的方法
------------------------------------------------------------------->
4. 多态
同一类事物的同一行为,在具体不同事物中的表现形式则不同
比如: 动物都有吃这个行为,狗吃则是啃着吃,鸡吃则是啄着吃,猫吃则是舔着吃
4.1 多态的好处
父类作为方法的形式参数,传递子类对象给方法,进行方法的调用,更能体现多态的扩展性与便利
----------------------------------------------------------------------->
5. 引用数据类型转换
5.1 基本数据类型转换:  小转大->自动转换  大转小->强制转换
引用数据类型转换: 向上转型,向下转型
向上转型: (多态)子类类型向父类类型向上转换的过程
向下转型: 父类类型向子类类型转换的过程
5.2 为什么要向下转型呢?
因为父类不能调用子类特有的方法,所以要进行向下转型
5.3 转型异常
Animal a= new Cat(); Dog g = (Dog)a;  g.sing();
上面这个例子会报运行时异常错误,因为Cat对象与Dog对象并没有关系,他们只与Animal有关系
上述是将Cat对象向上转型为Animal,Animal再向下转型为Dog编译没有问题, 但在运行时就会报类型异常错误,因为Cat与Dog并没有关系