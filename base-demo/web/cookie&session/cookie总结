会话技术
    简述: 客户端与服务端进行多次请求和响应则形成了会话
    比如: 我们访问将京东,从选产品到下单到购物车,这一系列的操作则形成了一个会话
    会话过程中需要解决的问题:
    在会话过程中难免会产生一些数据,我们如何为没个用户保存这些信息呢?
    解决: servlet在会话过程中保存数据方式为: Cooke技术和Session技术

Cookie技术
    简述: 是服务端中的一项技术,服务端将一些数据保存在cookie中,然后通过response将cookie返回给客户端(浏览器),浏览器则将
         这些信息保存起来,下次请求的时候取出并渲染至页面

    <1> Cookie使用步骤
        1. 创建cookie对象
        方法: new Cookie(key,value);
        key: 属性名  value: 属性对应的值
        例: Cookie nameCookie = new Cookie("name", name);
        2. 写入至响应对象中
        方法: addCookie();
        将cookie信息保存在响应对象中
        例: resp.addCookie(nameCookie);

    <2> cookie持久化设置(设置Cookie的存活时间)
        Cookie分为会话级别的和持久性的
        会话级别的cookie: 浏览器默认的Cookie存活时间是会话结束(也就是浏览器关闭,则Cookie清除,再次打开浏览器则没有Cookie信息)
        持久行的Cookie: 通过设置存活时间来达到持久性
        方法: setMaxAge(int i);  单位: 秒
        例: nameCookie.setMaxAge(60*60);

    <3> 设置Cookie的有效路径
        也就是只有通过该路径或该路径的子类才能访问到这个cookie
        方法: setPath();
        路径设置为: "/" 代表项目中全路径的都可以拿到该cookie
        例: /cookie/a
        /cookie 全路径可以拿到cookie   /cookie/a/b  子路径也可以拿到cookie    /cookie  上级目录是拿不到cookie的
        注: 每次的cookie是在请求头中携带的而不是响应头

    <4> 获取cookie中的value,name
         resp.getCookies();  获取一个cookie数组

    <5> 删除Cookie
          1. 创建一个同名的cookie,将其value设置为空
          2. 设置相同的有效路径
          3. 存活时间设置为0
          4. 通过响应对象覆盖原来的cookie

    <6> Cookie的优势与劣势
        优势: 减轻了访问服务的压力(比如: 京东,淘宝)
        劣势: 保存的信息将暴露在浏览器上,不安全