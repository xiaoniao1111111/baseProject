NoSql
 简述: 非关系型数据库
 非关系型数据库与关系型数据的区别
              非关系型数据库  关系型数据库
  <1> 操作性质: 在内存中      通过流的方式存储在硬盘中
  <2> 存储数据特点: key-value键值对方式存储  主外键关系型存储
  <3> 存取不需要效验   存储时要进行效验
  <4> 存取的数据没有关联性   表与表之间相互关联

1. 为什么需要Nosql
    <1> 对数据库的高并发读写需求
     在高并发的情况下,每秒进行上万次的读写操作,关系型数据库查询还可以接受,但是写入的操作则有点吃力
    <2> 对海量数据的高效率存储和访问的需求
    例如: 某网站实时统计用户的在线状态,记录热门帖子的点击数,投票数
    <3> 对数据库的高扩展和高可用性的需求

2. 非关系型数据库
   常用:  Redis,MongoDB

3. NoSql特点
    <1> 易扩展: 数据之间无关系特性,扩展起来相对容易
    <2> 强大的读写能力
    <3> 灵活的数据模型: 无需事先建立字段,可以存储自定义数据格式

Redis
   简述: 它是一个非关系型缓存数据库,是存储在内存中的数据库,高性能的键值(key-value)对数据库

1. Redis的应用场景
    <1>  缓存（数据查询、短连接、新闻内容、商品内容等等）
    <2>  聊天室的在线好友列表
    <3>  任务队列(开发中常用ActiveMQ 或者 RabbitMQ)（秒杀、抢购、12306等等）
    <4>  应用排行榜
    <5>  网站访问统计
    <6>  数据过期处理（可以精确到毫秒)
    7)  分布式集群架构中的session分离

2. Redis的5钟数据类型
       <1> 字符串类型
           key-value缓存应用
           特点:  value最多可以容纳的数据长度是512M
           应用场景: 计算微博数,粉丝数及json格式的数据

       <2> 散列类型(hash)
           特点: 存储的数据不会重复,用于存储部分变更数据
           应用场景: 比如用户信息

       <3> 列表类型(list)
            特点:
            1. 存储的是一个链表,存储有序,元素可以重复
            2. 存储时如果该键不存在,redis会以该键创建一个新的链表
            3. 如果链表中的所有元素均被移除,则该键也会在数据库中删除
            4. list中可以包含最大元素的数量是: 4294967295
            应用场景: 存储一个人的关注列表,粉丝列表以及轻松实现最新消息排行榜功能

       <4> 集合类型(set)
           特点:
           1. 存储无限,元素不可以重复
           2. set可以包含最大元素数量是: 4294967295
       <5> 有序集合类型(sortedSet)
       
11. redis持久化机制
    redis持久换机制分为两种:   AOF持久化机制和RDB持久化机制
    AOF持久化机制
    1)  redis配置文件: redis.window.conf
    2)  配置持久化机制: appendonly yes
    3)  保存持久化的文件: appendonly.aof
    4)  数据存储的方式: 采用命令的方式存储
    5)  持久化机制的方式
        appendfsync always: 每当数据发生改变就进行持久化
        appendfsync everysec: 每秒进行持久化
        appendfsync no: 不进行持久化

    RDB持久化机制(默认是RDB持久化机制)
    1)  redis配置文件: redis.window.conf
    2)  配置持久化机制: appendonly no
    3)  保存持久化的文件: dump.rdb
    4)
    5)  持久化机制的方式(单位: 秒)
        save  900   1条 : 15分钟之内有一条数据,就进行持久化
        save  300   10条 : 5分钟之内有一条数据,就进行持久化
        save  60    10000条: 1分钟内有10000条数据,就进行持久化

    AOF持久化机制和RDB持久化机制选择
    1)  当我们存储的数据很关键,其他地方也没有备份的时候,数据丢失会造成很大风险的时候,采用AOF持久化机制
    2)  当我们的redis只是用来做缓存,数据丢失后还可以从数据库中再次获取,无风险,则采用RDB持久化机制
    3)  RDB持久化机制相对来说性能更高,造成服务器的压力也小,因为它的持久化机制会大大减少数据持久化,而
        对于数据安全性来说,AOF持久化机制会更好,因为它的持久化机制是数据发生改变或每秒进行数据持久化







