过滤器
简述: 对客户端访问的资源进行过滤,满足条件放行,不满足则不放行
1.  场景:
        1). 免登陆功能
        2). 登录权限验证
        3). 非法字符,敏感词过滤(发布的评论带有脏字,进行拦截然后做屏蔽处理)

2.  创建步骤:
            1) 创建一个自定义过滤器类实现Filter接口,重写里面方法
            2) 在doFilter方法中,调用doFilter()方法,对请求路径放行
            2) web.xml中配置过滤器拦截路径<filter></filter>
            3) 创建该拦截路径的Servlet
        注: 这里通过调用doFilter()方法来进行放行

3.  原理:
        1). 客户端发起请求访问服务端
        2). 过滤器拦截当前请求路径,判断是否放行,放行则进入下一步,不放行则抛出异常提示相关业务信息
        3). 放行,进去业务请求路径接口,处理数据,返回结果给客户端(此时还没有将结果返回给客户端)
        4). 进入过滤器以下逻辑,处理完成
        5). 最终将响应结果返回给客户端

4. 生命周期:
           filter创建: tomact服务器启动成功后立即创建Filter对象,同时执行init方法,后续不再创建Filter对象
           filter生效: 每次请求会调用doFilter()方法进入doFilter方法中进行判断是否放行
           filter销毁: tomact服务器关闭之前,调用destory(),释放资源,服务器关闭,Filter对象销毁

5. 多个过滤器对同一个请求拦截执行顺序
    请求顺序: 根据web.xml中拦截器的配置顺序,配置在最前面的先执行(从前往后),
    响应返回顺序: 从后往前依次执行

6. web.xml中url-pattern匹配方式:
                    web路径           资源路径
    1) 全路径匹配      web/a             web/a
    2) 目录名匹配      web/*             web/a,web/b,web/c
    3) 后缀名匹配     *.xxx(例: *.txt)   a.txt,b.txt

7. 注解拦截器
    注解: @WebFilter(urlPatterns = "/filter001")
    注: 当有多个注解拦截器的时候,执行顺序则是根据拦截器的首字母排序来进行执行
    例: AnnFilter BnnFilter
    则是先执行: AnnFilter 后执行: BnnFilter