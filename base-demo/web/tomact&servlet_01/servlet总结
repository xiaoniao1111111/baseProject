Servlet
1. servlet简述
    简述: 运行在服务端的一个java小程序,用来接收客户端发起的请求,并将响应结果返回给客户端的一个web动态资源
    作用: 接收客户端的请求参数,并处理请求参数数据,将处理的结果响应给客户端

2. Servlet创建步骤
    <1> 创建一个实现类去实现servlet接口
    <2> 复写里面的4个方法,在servcice方法中打印输出语句
    <3> 在Web.xml配置文件中配置该类的路径以及类的访问路径
    <4> 启动tomact,并访问配置中的路径

2. Servlet生命周期
    servlet创建: 服务器启动之后,第一次访问servlet的时候,tomcat会创建一个servlet对象,
                对象创建完成之后会去执行init方法,后续请求不会创建Servlet
    servlet生效: 会去执行service,我们请求的参数及参数处理,最终返回结果都在这个方法中完成
    servlet销毁: 在tomact服务器关闭前会去调用destroy方法,用来释放资源,最终服务器关闭,servlet销毁

3. Servlet访问流程
   <1> 浏览器通过请求路径去访问资源
   <2> tomact拿到请求路径后去web.xml配置文件中去中这个路经(web.xml配置文件会在tomact启动的时候加载到内存中)
   <3> 找到这个路径后,往上面走就会拿到该路径对应的类名,然后再通过类名拿到类的全路径
   <4> 拿到类的全路径之后通过反射技术来创建这个servlet对象,同时在创建对应过程中会去执行inint方法
   <5> 对象有了就可以通过对象去访问对象中service方法,从而接受到参数,处理参数并将响应结果给到客户端
   <6> 当关闭tomct服务器前会去调用destroy方法来释放资源,最终服务器关闭

4. tomact启动后立即加载
    在web.xml配置中添加 <load-on-startup>2</load-on-startup> 配置,配置中的数字越小就越先被执行
    总共有: 1,2,3,4级

5. servlet演变
   演变一: 自定义类实现servlet
   缺点: 在实现servlet接口的时候,要重写里面所有的方法

   演变二: 自定义类继承gererctorServlet
   继承这个类的优点在于不用复写所有的方法,只需要复写service方法即可

   演变三: 自定义类继承httpServlet
   在实际生活中我们是在http协议下请求的,所以我们只需要处理http下的请求和响应即可,也就是说我们需要一个
   与http相关的servlet
   优点: httpServlet根据请求方式来进行不同的请求,比如请求方式是get请求,那就调用doGet()方法,如果是
   post请求,那就调用doPost()方法,不用去复写service()方法了

   演变四: 通过注解的方式来实现请求路径的配置(@WebServlet)
   与以前方式对比: 每有一个不同请求都要在web.xml配置中去配置路径,如果有100个则要配置一百次,为了优化这个操作,
   则通过注解来实现路径的配置
  1. 注解参数详解
    @WebServlet(name="AnnServlet",urlPatterns = {"/servlet1","/servlet2"})
    name: 对应的是子类的类名
    urlPatterns: 对应的是请求路径,该参数是个数组可以存放多个请求路径,访问其中一个路径都可以访问
    这个类